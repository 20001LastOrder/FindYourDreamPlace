{"version":3,"sources":["App.js","serviceWorker.js","Components/MyGoogleMap.jsx","Components/HomePage.jsx","Components/MapContainer.jsx","index.js","logo.svg"],"names":["Component","Boolean","window","location","hostname","match","AnyReactComponent","_ref","text","react_default","a","createElement","react","Place_default","color","fontSize","SimpleMap","_this$props","this","props","center","name","zoom","address","console","log","style","height","minWidth","lib_default","bootstrapURLKeys","key","language","region","heatmapLibrary","MyGoogleMap_AnyReactComponent","lat","lng","HomePage","state","url","error","inProgress","handleChange","event","_this","setState","target","value","callBackend","concat","fetch","then","res","json","result","Label","catch","prevProps","prevState","AppBar_default","position","Toolbar_default","Typography_default","variant","Grid_default","container","item","xs","Paper_default","padding","margin","noValidate","autoComplete","TextField_default","fullWidth","id","label","onChange","Button_default","onClick","CircularProgress_default","MyGoogleMap","ReactDOM","render","Components_HomePage","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.72d0409b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component,Fragment } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport {InfoWindow, Marker, GoogleApiWrapper} from \"google-maps-react\";\nimport Person from \"@material-ui/icons/Place\";\n\nconst AnyReactComponent = ({ text }) => {\n  return (\n    <Fragment>\n    <Person color={\"secondary\"} fontSize={\"large\"}/>\n    {text}\n  </Fragment>\n  );\n}\n\nclass SimpleMap extends Component {\n \n  render() {\n    const {center, name, address, zoom} = this.props;\n    console.log(center);\n    return (\n      // Important! Always set the container height explicitly\n      <div style={{ height: '100vh', minWidth: '80%' }}>\n        <GoogleMapReact\n          bootstrapURLKeys={{\n            key: \"AIzaSyBs-MSKD9Xoh6UuwB-LpE2lKYKKndq3ASM\",\n            language: 'en',\n            region: 'en'\n          }}\n          zoom={zoom || 11}\n          center={center}\n          heatmapLibrary={true}\n        >\n        \n          <AnyReactComponent\n            lat={center ? center.lat : 59.95}\n            lng={center ? center.lng : 30.33}\n            text={name}\n          />\n \n        </GoogleMapReact>\n      </div>\n    );\n  }\n}\n \nexport default SimpleMap;","import React, { Component, Fragment } from 'react';\nimport Button from '@material-ui/core/Button';\nimport MyGoogleMap from \"./MyGoogleMap\";\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport 'whatwg-fetch';\n\n\nclass HomePage extends Component{\n    state={\n        url: \"https://d3n8a8pro7vhmx.cloudfront.net/bnaibrithcanada/pages/2436/attachments/original/1518020966/MAR22_POTTER_POST02.jpg?1518020966\",\n        name:\"Kreyser Avrora\",\n        address:\"\",\n        error: \"\",\n        center:{\n            lat:59.955413,\n            lng:30.337844\n        },\n        inProgress:false\n    }\n    \n    handleChange = event =>{\n        this.setState({url: event.target.value});\n    }\n    \n    componentDidUpdate(prevProps, prevState){\n        const {name} = this.state;\n        if(name !== prevState.name){\n            this.setState({inProgress: false});\n        }\n    }\n    \n    callBackend = () =>{\n        const {url} = this.state;\n        console.log(`try calling api using url ${url}`);\n        this.setState({inProgress: true});\n        window\n        .fetch(\"https://vision-backend-codejam.herokuapp.com/image?url=\"+url)\n        .then(res => res.json())\n        .then(\n            (result) => {\n                const {Label, address, location, name} = result;\n                this.setState({\n                    center: location,\n                    address,\n                    name\n                });\n                console.log(result);\n            },\n            // Note: it's important to handle errors here\n            // instead of a catch() block so that we don't swallow\n            // exceptions from actual bugs in components.\n            (error) => {\n              this.setState({error: \"call failed\"});\n            }\n         )\n         .catch(\n             error => \n              console.log(`catch error ${error}`)\n            );\n         //.finally(()=>this.setState({inProgress: false}));\n    }\n    \n    render(){\n        return  (\n        <Fragment>\n        <AppBar position=\"static\" color=\"primary\">\n               <Toolbar>\n                    <Typography variant=\"h6\" color=\"inherit\">\n                        Take a picture to find where you are!\n                    </Typography>\n                </Toolbar>\n        </AppBar>\n        \n        <Grid container>\n            <Grid item xs={12}>\n                <Paper style={{padding: \"10px\", margin:\"10px\", minWidth: \"80%\"}}>\n                <form noValidate autoComplete=\"off\">\n                    <TextField\n                        fullWidth\n                        id=\"standard-name\"\n                        label=\"Enter picture URL:\"\n                        value={this.state.url}\n                        onChange={this.handleChange}\n                        margin=\"normal\"\n                    />\n                </form>\n                <Button variant=\"contained\" color=\"primary\" onClick={this.callBackend}>\n                    Submit\n                </Button>\n                </Paper>\n            </Grid>\n            {this.state.inProgress &&\n                (<Grid item xs={12}>\n                    <CircularProgress color=\"secondary\"/>\n                </Grid>)\n            }\n            <Grid item xs={12}>\n                <MyGoogleMap \n                    url={this.state.url} \n                    center={this.state.center}\n                    name={this.state.name} \n                    address={this.state.address}\n                    zoom={16}\n                />\n            </Grid>\n        </Grid>\n        </Fragment>\n        );\n    }\n}\n\nexport default HomePage;","import React, {Component, Fragment} from \"react\";\nimport {Map, InfoWindow, Marker, GoogleApiWrapper} from \"google-maps-react\";\n\nclass MapContainer extends Component {\n  render() {\n    return (\n      <Map google={this.props.google} zoom={14}>\n        <Marker onClick={this.onMarkerClick}\n                name={'Current location'} />\n      </Map>\n    );\n  }\n}\n\nexport default MapContainer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport MyGoogleMap from './Components/MyGoogleMap';\nimport HomePage from './Components/HomePage';\nimport MapContainer from './Components/MapContainer';\n\nReactDOM.render(<HomePage />, document.getElementById('main'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}